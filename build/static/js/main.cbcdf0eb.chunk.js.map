{"version":3,"sources":["components/Stopwatch.js","components/Distance.js","views/Home.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Stopwatch","startTime","timerInterval","elapsedTime","print","txt","document","getElementById","innerHTML","showButton","buttonKey","buttonToHide","pauseButton","playButton","style","display","addEventListener","Date","now","setInterval","time","diffInHrs","diffInMin","Math","floor","mm","diffInSec","ss","diffInMs","ms","formattedMM","toString","padStart","formattedSS","formattedMS","timeToString","clearInterval","resetButton","className","id","src","alt","Distance","dis","css","Home","OneSignal","initialize","safari_web_id","App","path","promptOnVisit","timesToShow","copyClosePrompt","permanentlyHideOnDismiss","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.cbcdf0eb.chunk.js","sourcesContent":["import \"../styles/stopwatch.css\";\nconst Stopwatch = () => {\n    function timeToString(time) {\n    let diffInHrs = time / 3600000;\n    let hh = Math.floor(diffInHrs);\n\n    let diffInMin = (diffInHrs - hh) * 60;\n    let mm = Math.floor(diffInMin);\n\n    let diffInSec = (diffInMin - mm) * 60;\n    let ss = Math.floor(diffInSec);\n\n    let diffInMs = (diffInSec - ss) * 100;\n    let ms = Math.floor(diffInMs);\n\n    let formattedMM = mm.toString().padStart(2, \"0\");\n    let formattedSS = ss.toString().padStart(2, \"0\");\n    let formattedMS = ms.toString().padStart(2, \"0\");\n\n    return `${formattedMM}:${formattedSS}:${formattedMS}`;\n    }\n\n    // Declare variables to use in our functions below\n\n\n    let startTime;\n    let elapsedTime = 0;\n    let timerInterval;\n\n    // Create function to modify innerHTML\n\n    function print(txt) {\n    document.getElementById(\"display\").innerHTML = txt;\n    }\n\n    // Create \"start\", \"pause\" and \"reset\" functions\n\n    function start() {\n    startTime = Date.now() - elapsedTime;\n    timerInterval = setInterval(function printTime() {\n        elapsedTime = Date.now() - startTime;\n        print(timeToString(elapsedTime));\n    }, 10);\n    showButton(\"PAUSE\");\n    }\n\n    function pause() {\n    clearInterval(timerInterval);\n    showButton(\"PLAY\");\n    }\n\n    function reset() {\n    clearInterval(timerInterval);\n    print(\"00:00:00\");\n    elapsedTime = 0;\n    showButton(\"PLAY\");\n    }\n\n    // Create function to display buttons\n\n    function showButton(buttonKey) {\n    const buttonToShow = buttonKey === \"PLAY\" ? playButton : pauseButton;\n    const buttonToHide = buttonKey === \"PLAY\" ? pauseButton : playButton;\n    buttonToShow.style.display = \"block\";\n    buttonToHide.style.display = \"none\";\n    }\n    // Create event listeners\n\n    let playButton = document.getElementById(\"playButton\");\n    if(playButton){\n          playButton.addEventListener(\"click\", start, false);\n    }\n    let pauseButton = document.getElementById(\"pauseButton\");\n    if(pauseButton){\n          pauseButton.addEventListener(\"click\", pause);\n\n    }\n    let resetButton = document.getElementById(\"resetButton\");\n    if(resetButton){\n          resetButton.addEventListener(\"click\", reset);\n    }\n\n    \n\n    return ( \n        <div className=\"stopwatch\">\n      <h1><span className=\"gold\">RUNNING</span> STOPWATCH</h1>\n      <div className=\"circle\">\n        <span className=\"time\" id=\"display\">00:00:00</span>\n      </div>\n\n      <div className=\"controls\">\n        <button className=\"buttonPlay\">\n          <img id=\"playButton\" src=\"https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/play-button_opkxmt.svg\" alt=\"start\" />\n\n          <img id=\"pauseButton\" src=\"https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/pause-button_pinhpy.svg\" alt=\"start\" />\n        </button>\n\n        <button className=\"buttonReset\">\n          <img id=\"resetButton\" src=\"https://res.cloudinary.com/https-tinloof-com/image/upload/v1593360448/blog/time-in-js/reset-button_mdv6wf.svg\" alt=\"start\" />\n        </button>\n      </div>\n    </div>\n     );\n}\n \nexport default Stopwatch;","/** @jsxImportSource @emotion/react */\nimport { css } from \"@emotion/react\";\nconst Distance = ({dis}) => {\n    const style = css`\n        margin-top: 3em;\n    `;\n    return ( \n        <div css={style}>\n            <h1>{dis}</h1>\n        </div>\n     );\n}\n \nexport default Distance;","/** @jsxImportSource @emotion/react */\nimport Stopwatch from '../components/Stopwatch';\nimport Distance from '../components/Distance';\n\n\nconst Home = () => {\n\n    return ( \n        <>\n        <main>\n            <Stopwatch/>\n            <Distance dis=\"0.3km\"/> \n        \n        \n        </main>\n        </>\n\n     );\n}\n \nexport default Home;","import React from 'react';\nimport { Router } from '@reach/router'\nimport OneSignal from 'react-onesignal';\nimport PWAPrompt from 'react-ios-pwa-prompt'\n//import Localbase from \"localbase\"\nimport Home from \"./views/Home\";\n\n// let myDatabase = new Localbase('myDatabase')\n\nOneSignal.initialize('6476da31-4579-4739-81b3-12266fba26f4', {\n  safari_web_id: \"web.onesignal.auto.39e347a3-7290-467c-af89-3542a6fc2365\"\n})\n\nfunction App() {\n  return (\n    <>\n    <Router>\n      <Home path=\"/\"/>\n    </Router>\n      <PWAPrompt promptOnVisit={1} timesToShow={3} copyClosePrompt=\"Close\" permanentlyHideOnDismiss={false} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}